# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserEntity {
  id: String!
  username: String!
  name: String!
  email: String!
  roles: [String!]!
  createdDate: DateTime!
  updatedDate: DateTime!
  deletedDate: DateTime!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Author {
  expiresIn: Int!
  accessToken: String!
  user: UserEntity!
}

type AuthorBook {
  id: String!
  name: String!
  phone: String
  email: String
  book: [Book!]!
}

type Reader {
  id: String!
  name: String!
  phone: String
  email: String
  borrow: [Borrow!]!
}

type Borrow {
  id: String!
  tranDate: DateTime!
  returnDate: DateTime!
  note: String
  reader: Reader!
  readerId: String!
  details: [BorrowDetails!]!
}

type BorrowDetails {
  id: String!
  borrow: Borrow!
  parentId: String!
  books: Book!
  bookId: String!
}

type Book {
  id: String!
  title: String!
  author: AuthorBook!
  authorId: String!
  pubYear: DateTime
  borrow: [BorrowDetails!]!
}

type Query {
  getAll: [UserEntity!]!
  getUserById(id: String!): UserEntity!
  whoAmI: UserEntity!
  books: [Book!]!
  book(id: String!): Book!
  readers: [Reader!]!
  reader(id: String!): Reader!
  authorBooks: [AuthorBook!]!
  authorBook(id: String!): AuthorBook!
  borrows: [Borrow!]!
  borrow(id: String!): Borrow!
}

type Mutation {
  update(id: String!, updateInput: UserUpdateDTO!): UserEntity!
  deleted(id: String!): String!
  login(loginInput: LoginDTO!): Author!
  register(doc: RegisterDTO!): UserEntity!
  changePassword(userInput: ChangePasswordDTO!): UserEntity!
  createBook(createBookInput: CreateBookInput!): Book!
  updateBook(updateBookInput: UpdateBookInput!): Book!
  removeBook(id: String!): Book!
  createReader(createReaderInput: CreateReaderInput!): Reader!
  updateReader(updateReaderInput: UpdateReaderInput!): Reader!
  removeReader(id: String!): Reader!
  createAuthorBook(createAuthorBookInput: CreateAuthorBookInput!): AuthorBook!
  updateAuthorBook(updateAuthorBookInput: UpdateAuthorBookInput!): AuthorBook!
  removeAuthorBook(id: Int!): AuthorBook!
  createBorrow(createBorrowInput: CreateBorrowInput!): Borrow!
  updateBorrow(updateBorrowInput: UpdateBorrowInput!): Borrow!
  removeBorrow(id: String!): Borrow!
}

input UserUpdateDTO {
  username: String!
  name: String!
  email: String!
}

input LoginDTO {
  username: String!
  password: String!
}

input RegisterDTO {
  username: String!
  email: String!
  roles: [String!]
  name: String!
  password: String!
  passwordConfirmation: String!
}

input ChangePasswordDTO {
  username: String!
  currentPassword: String!
  password: String!
}

input CreateBookInput {
  title: String!
  authorId: String!
  pubYear: DateTime
}

input UpdateBookInput {
  title: String
  authorId: String
  pubYear: DateTime
  id: String!
}

input CreateReaderInput {
  name: String!
  phone: String
  email: String
}

input UpdateReaderInput {
  name: String
  phone: String
  email: String
  id: String!
}

input CreateAuthorBookInput {
  name: String!
  phone: String
  email: String
}

input UpdateAuthorBookInput {
  name: String
  phone: String
  email: String
  id: String!
}

input CreateBorrowInput {
  doc: BorrowInput!
  details: [BorrowDetailInput!]!
}

input BorrowInput {
  """Borrow date"""
  tranDate: DateTime!

  """Return date"""
  returnDate: DateTime!
  note: String
  readerId: String!
}

input BorrowDetailInput {
  bookId: String!
}

input UpdateBorrowInput {
  doc: BorrowInput
  details: [BorrowDetailInput!]
  id: String!
}